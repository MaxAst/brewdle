-- USERS
create table public.users (
  id          uuid references auth.users not null, -- UUID from auth.users
  username    text,
  name        text,
  primary key (id)
);
comment on column public.users.id is 'References the internal Supabase Auth user.';

-- POLLS
create table public.polls (
  id            uuid default uuid_generate_v4(),
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  name          text not null,
  created_by    uuid references public.users not null,
  primary key   (id)
);

-- DATES
create table public.dates (
  id            bigint generated by default as identity primary key,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
  value         date,
  poll_id       uuid references public.polls on delete cascade not null
);

-- DATE VOTES PER PARTICIPANT
create table public.votes (
  id              bigint generated by default as identity primary key,
  inserted_at     timestamp with time zone default timezone('utc'::text, now()) not null,
  voter           text not null,
  date_id         bigint references public.dates on delete cascade not null,
  user            uuid references public.users
);

-- Send "previous data" on change 
alter table public.users replica identity full; 
alter table public.polls replica identity full; 
alter table public.dates replica identity full;
alter table public.votes replica identity full;

-- inserts a row into public.users
create function public.handle_new_user() 
returns trigger as $$
begin
  insert into public.users (id, username)
  values (new.id, new.email);
  return new;
end;
$$ language plpgsql security definer;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */

begin; 
  -- remove the realtime publication
  drop publication if exists supabase_realtime; 

  -- re-create the publication but don't enable it for any tables
  create publication supabase_realtime;  
commit;

-- add tables to the publication
alter publication supabase_realtime add table public.users;
alter publication supabase_realtime add table public.polls;
alter publication supabase_realtime add table public.dates;
alter publication supabase_realtime add table public.votes;