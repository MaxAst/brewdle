/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/dates": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.dates.id"];
          inserted_at?: parameters["rowFilter.dates.inserted_at"];
          value?: parameters["rowFilter.dates.value"];
          poll_id?: parameters["rowFilter.dates.poll_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["dates"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** dates */
          dates?: definitions["dates"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.dates.id"];
          inserted_at?: parameters["rowFilter.dates.inserted_at"];
          value?: parameters["rowFilter.dates.value"];
          poll_id?: parameters["rowFilter.dates.poll_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.dates.id"];
          inserted_at?: parameters["rowFilter.dates.inserted_at"];
          value?: parameters["rowFilter.dates.value"];
          poll_id?: parameters["rowFilter.dates.poll_id"];
        };
        body: {
          /** dates */
          dates?: definitions["dates"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/polls": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.polls.id"];
          inserted_at?: parameters["rowFilter.polls.inserted_at"];
          name?: parameters["rowFilter.polls.name"];
          created_by?: parameters["rowFilter.polls.created_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["polls"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** polls */
          polls?: definitions["polls"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.polls.id"];
          inserted_at?: parameters["rowFilter.polls.inserted_at"];
          name?: parameters["rowFilter.polls.name"];
          created_by?: parameters["rowFilter.polls.created_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.polls.id"];
          inserted_at?: parameters["rowFilter.polls.inserted_at"];
          name?: parameters["rowFilter.polls.name"];
          created_by?: parameters["rowFilter.polls.created_by"];
        };
        body: {
          /** polls */
          polls?: definitions["polls"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          name?: parameters["rowFilter.users.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          name?: parameters["rowFilter.users.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** References the internal Supabase Auth user. */
          id?: parameters["rowFilter.users.id"];
          username?: parameters["rowFilter.users.username"];
          name?: parameters["rowFilter.users.name"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/votes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          inserted_at?: parameters["rowFilter.votes.inserted_at"];
          voter?: parameters["rowFilter.votes.voter"];
          date_id?: parameters["rowFilter.votes.date_id"];
          user_id?: parameters["rowFilter.votes.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          inserted_at?: parameters["rowFilter.votes.inserted_at"];
          voter?: parameters["rowFilter.votes.voter"];
          date_id?: parameters["rowFilter.votes.date_id"];
          user_id?: parameters["rowFilter.votes.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          inserted_at?: parameters["rowFilter.votes.inserted_at"];
          voter?: parameters["rowFilter.votes.voter"];
          date_id?: parameters["rowFilter.votes.date_id"];
          user_id?: parameters["rowFilter.votes.user_id"];
        };
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  dates: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    inserted_at: string;
    value?: string;
    /**
     * Note:
     * This is a Foreign Key to `polls.id`.<fk table='polls' column='id'/>
     */
    poll_id: string;
  };
  polls: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    inserted_at: string;
    name: string;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    created_by: string;
  };
  users: {
    /**
     * References the internal Supabase Auth user.
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    username?: string;
    name?: string;
  };
  votes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    inserted_at: string;
    voter: string;
    /**
     * Note:
     * This is a Foreign Key to `dates.id`.<fk table='dates' column='id'/>
     */
    date_id: number;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id?: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** dates */
  "body.dates": definitions["dates"];
  "rowFilter.dates.id": string;
  "rowFilter.dates.inserted_at": string;
  "rowFilter.dates.value": string;
  "rowFilter.dates.poll_id": string;
  /** polls */
  "body.polls": definitions["polls"];
  "rowFilter.polls.id": string;
  "rowFilter.polls.inserted_at": string;
  "rowFilter.polls.name": string;
  "rowFilter.polls.created_by": string;
  /** users */
  "body.users": definitions["users"];
  /** References the internal Supabase Auth user. */
  "rowFilter.users.id": string;
  "rowFilter.users.username": string;
  "rowFilter.users.name": string;
  /** votes */
  "body.votes": definitions["votes"];
  "rowFilter.votes.id": string;
  "rowFilter.votes.inserted_at": string;
  "rowFilter.votes.voter": string;
  "rowFilter.votes.date_id": string;
  "rowFilter.votes.user_id": string;
}

export interface operations {}

export interface external {}
